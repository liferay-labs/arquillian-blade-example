buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins", version: "3.2.40"
		classpath 'de.undercouch:gradle-download-task:3.1.1'
		classpath 'de.undercouch:gradle-download-task:3.1.1'
	}

	repositories {
		mavenLocal()

		mavenCentral()

		jcenter()

		maven {
			url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
		}
	}
}

repositories {
	mavenLocal()

	mavenCentral()

	jcenter()

	maven {
		url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}
}


apply plugin: "com.liferay.plugin"
apply plugin: 'de.undercouch.download'
apply plugin: "jacoco"

jacoco {
	toolVersion = "0.7.9"
}

dependencies {
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "2.5.0"
	compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "2.5.0"
	compileOnly group: "javax.portlet", name: "portlet-api", version: "2.0"
	compileOnly group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	compileOnly group: "javax.websocket", name: "javax.websocket-api", version: "1.1"
	compileOnly group: "jstl", name: "jstl", version: "1.2"
	compileOnly group: "org.osgi", name: "osgi.cmpn", version: "6.0.0"
	compileOnly group: "org.osgi", name: "osgi.core", version: "6.0.0"

	testIntegrationCompile group: "com.liferay.arquillian", name: "com.liferay.arquillian.arquillian-container-liferay", version: "1.0.6"
	testIntegrationCompile group: "junit", name: "junit", version: "4.12"
	testIntegrationCompile group: "org.jboss.arquillian.graphene", name: "graphene-webdriver", version: "2.1.0.Final"
	testIntegrationCompile group: "org.jboss.arquillian.junit", name: "arquillian-junit-container", version: "1.1.11.Final"
	testIntegrationCompile group: 'org.arquillian.extension', name: 'arquillian-desktop-video-recorder', version: '1.1.6.Final'
	testIntegrationCompile group: 'org.jboss.arquillian.graphene', name: 'arquillian-browser-screenshooter', version: '2.2.0'
}

import de.undercouch.gradle.tasks.download.Download
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import java.lang.management.*
import javax.management.ObjectName
import javax.management.remote.JMXConnectorFactory as JmxFactory
import javax.management.remote.JMXServiceURL as JmxUrl


def bundle = 'liferay/bundle.zip'

liferay {
	liferayHome = 'liferay/liferay-ce-portal-7.0-ga3'
}

task copyDependencies(type: Copy) {
	from configurations.testIntegrationRuntime - configurations.compile - configurations.runtime - configurations.testIntegrationCompile
	into "${liferay.liferayHome}/osgi/modules"
}

task copyJacocoAgent(type: Copy) {
println configurations.jacocoAgent

	configurations.jacocoAgent.asFileTree.each {
		from(zipTree(it))
	}

	into "${rootDir}/build/jacoco"
}

task downloadLiferay(type: Download) {
	src 'http://downloads.sourceforge.net/project/lportal/Liferay%20Portal/7.0.2%20GA3/liferay-ce-portal-tomcat-7.0-ga3-20160804222206210.zip?r=&ts=1476801340&use_mirror=kent'
	dest  file(bundle)
	overwrite false
	enabled !(file(liferay.liferayHome).exists())
}

task unzipLiferay(type: Copy) {
	from(zipTree(bundle))
	into 'liferay'
	enabled !(file(liferay.liferayHome).exists())
}

task copyPortalExt(type: Copy) {
	from file('src/testIntegration/resources/portal-ext.properties')
	into "${liferay.liferayHome}"
	enabled !(file(liferay.liferayHome).exists())
}

unzipLiferay.dependsOn downloadLiferay
copyPortalExt.dependsOn unzipLiferay
setUpTestableTomcat.dependsOn copyPortalExt

jar {
	if (project.hasProperty('dir')) {
		destinationDir = file(dir);
	}
}

setUpTestableTomcat {
	dependsOn copyJacocoAgent
	dependsOn copyDependencies

	// enable the line below if you have trouble with integration test connection to JMX server
	catalinaOptsReplacement "-XX:MaxPermSize=384m\"", "-XX:MaxPermSize=384m\"\n\nJACOCO_OPTS=\"-Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote.local.only=true -javaagent:${rootDir}/build/jacoco/jacocoagent.jar=destfile=${rootDir}/build/jacoco/testIntegration.exec,output=file,append=true,jmx=true\"\n\nCATALINA_OPTS=\"\${CATALINA_OPTS} \${JACOCO_OPTS}\"\n"
}

task checkJMX {
	doLast {
		def serverUrl = 'service:jmx:rmi:///jndi/rmi://127.0.0.1:8099/jmxrmi'

		def mbeans = JmxFactory.connect(new JmxUrl(serverUrl)).MBeanServerConnection

		println "Total MBeans: ${mbeans.MBeanCount}\n"

		def webBean = mbeans.queryNames(null, null).find {
			if(it.getKeyProperty('framework').equals('org.eclipse.osgi') && it.getKeyProperty('type').equals('framework')) {
				println "NAME "  + it.getKeyPropertyListString()

			}

		}
	}
}

def waitForUrlToBeAvailable(url) {
	println("Trying to reach " + url)

	while (true) {
		try {
			print(".")

			url.toURL().text

			println(url + " can now be reached")

			break
		}
		catch (Exception e) {
			Thread.sleep(1000)
		}
	}
}



task checkURL() {
	doLast {
		waitForUrlToBeAvailable("http://localhost:8080")
	}
}

stopTestableTomcat {
	enabled = false
}

startTestableTomcat {
	finalizedBy checkURL
	finalizedBy checkJMX

	checkTimeout = 10 * 60 * 1000
	enabled = false
}

repositories {
	mavenLocal()

	maven {
		url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}
}

task dumpJacoco {
	doLast {
		def serverUrl = 'service:jmx:rmi:///jndi/rmi://127.0.0.1:8099/jmxrmi'
		String beanName = "org.jacoco:type=Runtime"
		def server = JmxFactory.connect(new JmxUrl(serverUrl)).MBeanServerConnection
		def gmxb = new GroovyMBean(server, beanName)

		println "Connected to:\n$gmxb\n"
		println "Executing dump()"
		gmxb.dump(true)
	}
}

jacocoTestReport {
	dependsOn dumpJacoco
	group = "Reporting"
	reports {
		xml.enabled true
		csv.enabled false
		html.destination "${buildDir}/reports/coverage"
	}
	executionData = files("${rootDir}/build/jacoco/testIntegration.exec")
}

testIntegration {
	dependsOn checkURL
	dependsOn checkJMX

	finalizedBy jacocoTestReport
}

tasks.withType(Test) {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_ERROR,
				TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showCauses true
		showExceptions true
		showStackTraces true
	}
}